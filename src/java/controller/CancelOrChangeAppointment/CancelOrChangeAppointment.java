/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller.CancelOrChangeAppointment;

import dal.AppointmentsDao;
import dal.NotificationsDao;
import dal.ScheduleDao;
import dal.ScheduleExceptionsDao;
import dto.AppointmentDto;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Appointments;
import java.sql.Timestamp;
import java.sql.Date;
import java.sql.Time;

/**
 *
 * @author TNO
 */
@WebServlet(name = "CancelOrChangeAppointment", urlPatterns = {"/cancelOrChangeAppointment"})
public class CancelOrChangeAppointment extends HttpServlet {

    private AppointmentsDao appointmentsDao = new AppointmentsDao();
    private NotificationsDao notificationsDao = new NotificationsDao();
    private ScheduleDao scheduleDao = new ScheduleDao();
    private ScheduleExceptionsDao exceptionsDao = new ScheduleExceptionsDao();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        String action = req.getParameter("action"); // "cancel" ho·∫∑c "reschedule"
        int appointmentId = Integer.parseInt(req.getParameter("appointmentId"));

        // L·∫•y l·ªãch h·∫πn hi·ªán t·∫°i
        Appointments appointment = appointmentsDao.getAppointmentsById(appointmentId);
        if (appointment == null) {
            req.setAttribute("error", "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn!");
            req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
            return;
        }

        try {
            if ("cancel".equalsIgnoreCase(action)) {
                handleCancel(req, resp, appointment);
            } else if ("reschedule".equalsIgnoreCase(action)) {
                handleReschedule(req, resp, appointment);
            } else {
                req.setAttribute("error", "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!");
                req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
            }
        } catch (Exception e) {
            e.printStackTrace();
            req.setAttribute("error", "L·ªói x·ª≠ l√Ω: " + e.getMessage());
            req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
        }

    }

    /**
     * H·ªßy l·ªãch h·∫πn
     */
    private void handleCancel(HttpServletRequest req, HttpServletResponse resp, Appointments appointment)
            throws ServletException, IOException {

        String currentStatus = appointment.getStatus();
        if (!"Scheduled".equalsIgnoreCase(currentStatus)
                && !"Rescheduled".equalsIgnoreCase(currentStatus)) {
            req.setAttribute("error", "Ch·ªâ c√≥ th·ªÉ h·ªßy l·ªãch h·∫πn ƒëang ·ªü tr·∫°ng th√°i 'Scheduled' ho·∫∑c 'Rescheduled'.");
            req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
            return;
        }

        // Update status = Cancelled
        appointment.setStatus("Cancelled");
        appointment.setUpdatedDate(new Timestamp(System.currentTimeMillis()));

        boolean success = appointmentsDao.updateAppointment(appointment);
        if (!success) {
            req.setAttribute("error", "Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn!");
            req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
            return;
        }

        // G·ª≠i th√¥ng b√°o
        notificationsDao.insert(
                appointment.getDoctorId().getDoctorID(),
                "L·ªãch h·∫πn b·ªã h·ªßy",
                "L·ªãch h·∫πn ng√†y " + appointment.getAppointmentDate() + " ƒë√£ b·ªã h·ªßy.",
                "Appointment"
        );
        notificationsDao.insert(
                appointment.getPatientId().getPatientID(),
                "B·∫°n ƒë√£ h·ªßy l·ªãch h·∫πn",
                "L·ªãch h·∫πn ng√†y " + appointment.getAppointmentDate() + " ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.",
                "Appointment"
        );

        req.setAttribute("message", "H·ªßy l·ªãch h·∫πn th√†nh c√¥ng!");
        req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
    }

    /**
     * üß± Thay ƒë·ªïi l·ªãch h·∫πn
     */
    private void handleReschedule(HttpServletRequest req, HttpServletResponse resp, Appointments appointment)
            throws ServletException, IOException {

        Date newDate = Date.valueOf(req.getParameter("newDate"));
        Time newStart = Time.valueOf(req.getParameter("newStart") + ":00");
        Time newEnd = Time.valueOf(req.getParameter("newEnd") + ":00");

        // Ki·ªÉm tra h·ª£p l·ªá th·ªùi gian
        if (!newEnd.after(newStart)) {
            req.setAttribute("error", "Gi·ªù k·∫øt th√∫c ph·∫£i sau gi·ªù b·∫Øt ƒë·∫ßu!");
            req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
            return;
        }

        // === S·ª≠ d·ª•ng filterAppointment ƒë·ªÉ ki·ªÉm tra tr√πng l·ªãch ===
        AppointmentDto filter = new AppointmentDto();
        filter.setDoctorId(appointment.getDoctorId().getDoctorID());
        filter.setAppointmentDate(newDate);
        filter.setStartTime(newEnd);   // end tr∆∞·ªõc ƒë·ªÉ so s√°nh StartTime < newEnd
        filter.setEndTime(newStart);   // start sau ƒë·ªÉ so s√°nh EndTime > newStart
        filter.setStatus("Scheduled"); // ch·ªâ x√©t c√°c l·ªãch c√≤n hi·ªáu l·ª±c
        filter.setPaginationMode(false);

        // G·ªçi filterAppointment
        boolean isFree = true;
        var overlaps = appointmentsDao.filterAppointment(filter);
        if (overlaps != null && !overlaps.isEmpty()) {
            // Lo·∫°i tr·ª´ ch√≠nh l·ªãch h·∫πn hi·ªán t·∫°i ra kh·ªèi danh s√°ch ki·ªÉm tra
            for (Appointments ap : overlaps) {
                if (ap.getAppointmentId() != appointment.getAppointmentId()) {
                    isFree = false;
                    break;
                }
            }
        }

        if (!isFree) {
            req.setAttribute("error", "B√°c sƒ© kh√¥ng tr·ªëng trong khung gi·ªù n√†y!");
            req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
            return;
        }

        // C·∫≠p nh·∫≠t l·ªãch h·∫πn
        appointment.setAppointmentDate(newDate);
        appointment.setStartTime(newStart);
        appointment.setEndTime(newEnd);
        appointment.setStatus("Rescheduled");
        appointment.setUpdatedDate(new Timestamp(System.currentTimeMillis()));

        boolean success = appointmentsDao.updateAppointment(appointment);
        if (!success) {
            req.setAttribute("error", "Kh√¥ng th·ªÉ thay ƒë·ªïi l·ªãch h·∫πn!");
            req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
            return;
        }

        // G·ª≠i th√¥ng b√°o
        notificationsDao.insert(
                appointment.getDoctorId().getDoctorID(),
                "L·ªãch h·∫πn ƒë∆∞·ª£c d·ªùi l·∫°i",
                "L·ªãch h·∫πn v·ªõi b·ªánh nh√¢n ID " + appointment.getPatientId().getPatientID()
                + " ƒë√£ ƒë∆∞·ª£c d·ªùi sang ng√†y " + newDate + ".",
                "Appointment"
        );
        notificationsDao.insert(
                appointment.getPatientId().getPatientID(),
                "Thay ƒë·ªïi l·ªãch h·∫πn th√†nh c√¥ng",
                "L·ªãch h·∫πn v·ªõi b√°c sƒ© ID " + appointment.getDoctorId().getDoctorID()
                + " ƒë√£ ƒë∆∞·ª£c d·ªùi sang ng√†y " + newDate + ".",
                "Appointment"
        );

        req.setAttribute("message", "Thay ƒë·ªïi l·ªãch h·∫πn th√†nh c√¥ng!");
        req.getRequestDispatcher("/appointments/manage.jsp").forward(req, resp);
    }

    @Override
    public String getServletInfo() {
        return "Short description";
    }

}
